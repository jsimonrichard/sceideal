/*
 Generated by typeshare 1.4.0
*/

export enum OAuthProvision {
	Auth = "auth",
	Location = "location",
	Calendar = "calendar",
}

export interface PublicConfig {
	redirect_to_first_oauth_provider: boolean;
	oauth_providers: Record<OAuthProvision, string[]>;
}

export enum LocationType {
	Address = "Address",
	Link = "Link",
	Other = "Other",
}

export interface CreateLocation {
	type_: LocationType;
	name: string;
	description?: string;
}

export interface Location {
	id: number;
	public: boolean;
	user_id: number;
	type_: LocationType;
	name: string;
	description?: string;
	created_on: string;
	updated_at: string;
}

export interface UpdateLocation {
	type_?: LocationType;
	name?: string;
	description?: string;
}

export interface OAuthErrorMessage {
	error_msg: string;
}

export interface CreateUser {
	email: string;
	phone_number?: string;
	fname: string;
	lname: string;
	password: string;
}

export interface LoginData {
	email: string;
	password: string;
}

export enum PermissionLevel {
	Student = "Student",
	Teacher = "Teacher",
	Admin = "Admin",
}

export interface LocalLoginData {
	updated_at: string;
}

export interface OAuthConnectionData {
	provider: string;
	provides: OAuthProvision;
	created_on: string;
	updated_at: string;
}

export interface UserData {
	email: string;
	email_verified: boolean;
	phone_number?: string;
	fname: string;
	lname: string;
	bio?: string;
	profile_image?: string;
	permission_level: PermissionLevel;
	joined_on: string;
	updated_at: string;
	last_login?: string;
	local_login?: LocalLoginData;
	oauth_providers: OAuthConnectionData[];
}

